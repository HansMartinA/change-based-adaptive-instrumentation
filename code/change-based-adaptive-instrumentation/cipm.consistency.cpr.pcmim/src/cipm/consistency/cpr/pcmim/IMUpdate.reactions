import cipm.consistency.base.models.instrumentation.InstrumentationModel.InstrumentationModelPackage
import org.palladiosimulator.pcm.seff.LoopAction
import org.palladiosimulator.pcm.seff.InternalCallAction
import org.palladiosimulator.pcm.seff.BranchAction
import org.palladiosimulator.pcm.seff.ExternalCallAction
import org.palladiosimulator.pcm.seff.InternalAction
import cipm.consistency.base.models.instrumentation.InstrumentationModel.InstrumentationType
import org.eclipse.emf.ecore.InternalEObject
import cipm.consistency.cpr.pcmim.InternalUtility

import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm
import "http://www.dmodel.com/InstrumentationMetamodel" as im


reactions: imUpdate
in reaction to changes in PCMExtended
execute actions in IMM


reaction AddedSEFF {
	after element pcm::ResourceDemandingSEFF inserted in pcm::BasicComponent[serviceEffectSpecifications__BasicComponent]
	call {
		createOrFindServiceInstrumentationPoint(newValue)
	}
}

routine createOrFindServiceInstrumentationPoint(pcm::ResourceDemandingSEFF seff) {
	match {
		require absence of im::ServiceInstrumentationPoint corresponding to seff
		val insModel = retrieve im::InstrumentationModel corresponding to InstrumentationModelPackage.Literals.INSTRUMENTATION_MODEL
	}
	action {
		val sip = create im::ServiceInstrumentationPoint and initialize {
			sip.active = true
			sip.service = seff
		}
		update insModel {
			insModel.points += sip
		}
		add correspondence between sip and seff
	}
}

reaction AddedAction {
	after element pcm::AbstractAction inserted in pcm::ResourceDemandingBehaviour[steps_Behaviour]
	call {
		var actionType = InstrumentationType.INTERNAL_VALUE
		if (newValue instanceof LoopAction) {
			actionType = InstrumentationType.LOOP_VALUE
		} else if (newValue instanceof BranchAction) {
			actionType = InstrumentationType.BRANCH_VALUE
		} else if (newValue instanceof InternalAction) {
			actionType = InstrumentationType.INTERNAL_VALUE
		} else if (newValue instanceof InternalCallAction) {
			actionType = InstrumentationType.INTERNAL_CALL_VALUE
		} else if (newValue instanceof ExternalCallAction) {
			actionType = InstrumentationType.EXTERNAL_CALL_VALUE
		} else {
			actionType = -1
		}
		if (actionType !== -1) {
			var seff = InternalUtility.getParentSEFFNotForInternalBehaviour(affectedEObject)
			if (seff !== null) {
				createOrFindActionInstrumentationPoint(seff, newValue, actionType)
			}
		}
	}
}

routine createOrFindActionInstrumentationPoint(pcm::ResourceDemandingSEFF seff, pcm::AbstractAction absAction, Integer typeValue) {
	match {
		require absence of im::ActionInstrumentationPoint corresponding to absAction
		val sip = retrieve im::ServiceInstrumentationPoint corresponding to seff
	}
	action {
		val aip = create im::ActionInstrumentationPoint and initialize {
			aip.active = true
			aip.^action = absAction
			aip.type = InstrumentationType.get(typeValue)
		}
		update sip {
			sip.actionInstrumentationPoints += aip
		}
		add correspondence between aip and absAction
	}
}

reaction RemovedSEFF {
	after element pcm::ResourceDemandingSEFF removed from pcm::BasicComponent[serviceEffectSpecifications__BasicComponent]
	call {
		checkRemovalOfServiceInstrumentationPoint(oldValue)
	}
}

routine checkRemovalOfServiceInstrumentationPoint(pcm::ResourceDemandingSEFF seff) {
	match {
		val im = retrieve im::InstrumentationModel corresponding to InstrumentationModelPackage.Literals.INSTRUMENTATION_MODEL
	}
	action {
		call {
			val sip = im.points.filter[it.service.eIsProxy]
				.findFirst[(it.service as InternalEObject).eProxyURI.toString.contains(seff.id)]
			if (sip !== null) {
				removeServiceInstrumentationPoint(sip)
			} else {
				checkRemovalOfNonProxyServiceInstrumentationPoint(seff)
			}
		}
	}
}

routine checkRemovalOfNonProxyServiceInstrumentationPoint(pcm::ResourceDemandingSEFF seff) {
	match {
		val sip = retrieve im::ServiceInstrumentationPoint corresponding to seff
	}
	action {
		call {
			removeServiceInstrumentationPoint(sip)
		}
	}
}

routine removeServiceInstrumentationPoint(im::ServiceInstrumentationPoint sip) {
	action {
		delete sip
	}
}

reaction RemovedAbstractAction {
	after element pcm::AbstractAction removed from pcm::ResourceDemandingBehaviour[steps_Behaviour]
	call {
		var seff = InternalUtility.getParentSEFFNotForInternalBehaviour(affectedEObject)
		if (seff !== null) {
			checkRemovalOfActionInstrumentationPoint(oldValue, seff)
		}
	}
}

routine checkRemovalOfActionInstrumentationPoint(pcm::AbstractAction absAction, pcm::ResourceDemandingSEFF seff) {
	match {
		val sip = retrieve im::ServiceInstrumentationPoint corresponding to seff
	}
	action {
		call {
			val aip = sip.actionInstrumentationPoints.filter[it.^action.eIsProxy]
				.findFirst[(it.^action as InternalEObject).eProxyURI.toString.contains(absAction.id)]
			if (aip !== null) {
				removeActionInstrumentationPoint(aip)
			} else {
				checkRemovalOfNonProxyActionInstrumentationPoint(absAction)
			}
		}
	}
}

routine checkRemovalOfNonProxyActionInstrumentationPoint(pcm::AbstractAction absAction) {
	match {
		val aip = retrieve im::ActionInstrumentationPoint corresponding to absAction
	}
	action {
		call {
			removeActionInstrumentationPoint(aip)
		}
	}
}

routine removeActionInstrumentationPoint(im::ActionInstrumentationPoint aip) {
	action {
		delete aip
	}
}
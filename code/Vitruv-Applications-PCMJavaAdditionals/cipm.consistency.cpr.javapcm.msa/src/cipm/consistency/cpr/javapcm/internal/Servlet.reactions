import org.emftext.language.java.classifiers.Class
import org.emftext.language.java.members.Method
import org.emftext.language.java.classifiers.ConcreteClassifier

import "http://www.emftext.org/java" as java
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm


reactions: Servlet
in reaction to changes in AdjustedJava
execute actions in PCMExtended


import JaxRS

routine checkServletInterfaceCreation(java::ConcreteClassifier javaInterface) {
	match {
		val com = retrieve pcm::RepositoryComponent corresponding to javaInterface
	}
	action {
		call {
			for (cc : javaInterface.allSuperClassifiers) {
				if (cc.name.equals("HttpServlet")) {
					createInterface(javaInterface)
					val superClass = (javaInterface as Class).extends.target as Class
					createServletHierarchy(superClass)
					connectInterfacesByInheritance(javaInterface, superClass)
					return
				}
			}
		}
	}
}

routine createServletHierarchy(java::Class start) {
	action {
		call {
			createInterface(start)
			checkMembersForOperations(start)
			if (start.name.equals("GenericServlet")) {
				val servletInterface = start.implements.get(0).target as ConcreteClassifier
				createInterface(servletInterface)
				checkMembersForOperations(servletInterface)
				connectInterfacesByInheritance(start, servletInterface)
				return
			}
			val superClass = start.extends.target as Class
			createServletHierarchy(superClass)
			connectInterfacesByInheritance(start, superClass)
		}
	}
}

routine checkMembersForOperations(java::ConcreteClassifier classifier) {
	action {
		call {
			for (mem : classifier.members) {
				if (mem instanceof Method) {
					if (mem.public) {
						createOrFindPCMSignature(mem)
					}
				}
			}
		}
	}
}

routine connectInterfacesByInheritance(java::ConcreteClassifier subClassifier, java::ConcreteClassifier superClassifier) {
	match {
		val subInterface = retrieve pcm::OperationInterface corresponding to subClassifier
		val superInterface = retrieve pcm::OperationInterface corresponding to superClassifier
	}
	action {
		update subInterface {
			subInterface.parentInterfaces__Interface += superInterface
		}
	}
}

/**
 * generated by Xtext 2.24.0
 */
package tools.vitruv.dsls.reactions.language.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import tools.vitruv.dsls.common.elements.MetaclassReference;

import tools.vitruv.dsls.reactions.language.CorrespondingObjectCodeBlock;
import tools.vitruv.dsls.reactions.language.LanguagePackage;
import tools.vitruv.dsls.reactions.language.RetrieveOrRequireAbscenceOfModelElement;
import tools.vitruv.dsls.reactions.language.TagCodeBlock;
import tools.vitruv.dsls.reactions.language.Taggable;

import tools.vitruv.dsls.reactions.language.toplevelelements.PreconditionCodeBlock;

import tools.vitruv.dsls.reactions.language.toplevelelements.impl.MatcherStatementImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Retrieve Or Require Abscence Of Model Element</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link tools.vitruv.dsls.reactions.language.impl.RetrieveOrRequireAbscenceOfModelElementImpl#getTag <em>Tag</em>}</li>
 *   <li>{@link tools.vitruv.dsls.reactions.language.impl.RetrieveOrRequireAbscenceOfModelElementImpl#getElementType <em>Element Type</em>}</li>
 *   <li>{@link tools.vitruv.dsls.reactions.language.impl.RetrieveOrRequireAbscenceOfModelElementImpl#getCorrespondenceSource <em>Correspondence Source</em>}</li>
 *   <li>{@link tools.vitruv.dsls.reactions.language.impl.RetrieveOrRequireAbscenceOfModelElementImpl#getPrecondition <em>Precondition</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RetrieveOrRequireAbscenceOfModelElementImpl extends MatcherStatementImpl implements RetrieveOrRequireAbscenceOfModelElement
{
  /**
   * The cached value of the '{@link #getTag() <em>Tag</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTag()
   * @generated
   * @ordered
   */
  protected TagCodeBlock tag;

  /**
   * The cached value of the '{@link #getElementType() <em>Element Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElementType()
   * @generated
   * @ordered
   */
  protected MetaclassReference elementType;

  /**
   * The cached value of the '{@link #getCorrespondenceSource() <em>Correspondence Source</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCorrespondenceSource()
   * @generated
   * @ordered
   */
  protected CorrespondingObjectCodeBlock correspondenceSource;

  /**
   * The cached value of the '{@link #getPrecondition() <em>Precondition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrecondition()
   * @generated
   * @ordered
   */
  protected PreconditionCodeBlock precondition;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RetrieveOrRequireAbscenceOfModelElementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LanguagePackage.Literals.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TagCodeBlock getTag()
  {
    return tag;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTag(TagCodeBlock newTag, NotificationChain msgs)
  {
    TagCodeBlock oldTag = tag;
    tag = newTag;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__TAG, oldTag, newTag);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTag(TagCodeBlock newTag)
  {
    if (newTag != tag)
    {
      NotificationChain msgs = null;
      if (tag != null)
        msgs = ((InternalEObject)tag).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__TAG, null, msgs);
      if (newTag != null)
        msgs = ((InternalEObject)newTag).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__TAG, null, msgs);
      msgs = basicSetTag(newTag, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__TAG, newTag, newTag));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MetaclassReference getElementType()
  {
    return elementType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetElementType(MetaclassReference newElementType, NotificationChain msgs)
  {
    MetaclassReference oldElementType = elementType;
    elementType = newElementType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__ELEMENT_TYPE, oldElementType, newElementType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setElementType(MetaclassReference newElementType)
  {
    if (newElementType != elementType)
    {
      NotificationChain msgs = null;
      if (elementType != null)
        msgs = ((InternalEObject)elementType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__ELEMENT_TYPE, null, msgs);
      if (newElementType != null)
        msgs = ((InternalEObject)newElementType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__ELEMENT_TYPE, null, msgs);
      msgs = basicSetElementType(newElementType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__ELEMENT_TYPE, newElementType, newElementType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CorrespondingObjectCodeBlock getCorrespondenceSource()
  {
    return correspondenceSource;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCorrespondenceSource(CorrespondingObjectCodeBlock newCorrespondenceSource, NotificationChain msgs)
  {
    CorrespondingObjectCodeBlock oldCorrespondenceSource = correspondenceSource;
    correspondenceSource = newCorrespondenceSource;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__CORRESPONDENCE_SOURCE, oldCorrespondenceSource, newCorrespondenceSource);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCorrespondenceSource(CorrespondingObjectCodeBlock newCorrespondenceSource)
  {
    if (newCorrespondenceSource != correspondenceSource)
    {
      NotificationChain msgs = null;
      if (correspondenceSource != null)
        msgs = ((InternalEObject)correspondenceSource).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__CORRESPONDENCE_SOURCE, null, msgs);
      if (newCorrespondenceSource != null)
        msgs = ((InternalEObject)newCorrespondenceSource).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__CORRESPONDENCE_SOURCE, null, msgs);
      msgs = basicSetCorrespondenceSource(newCorrespondenceSource, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__CORRESPONDENCE_SOURCE, newCorrespondenceSource, newCorrespondenceSource));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PreconditionCodeBlock getPrecondition()
  {
    return precondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPrecondition(PreconditionCodeBlock newPrecondition, NotificationChain msgs)
  {
    PreconditionCodeBlock oldPrecondition = precondition;
    precondition = newPrecondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__PRECONDITION, oldPrecondition, newPrecondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPrecondition(PreconditionCodeBlock newPrecondition)
  {
    if (newPrecondition != precondition)
    {
      NotificationChain msgs = null;
      if (precondition != null)
        msgs = ((InternalEObject)precondition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__PRECONDITION, null, msgs);
      if (newPrecondition != null)
        msgs = ((InternalEObject)newPrecondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__PRECONDITION, null, msgs);
      msgs = basicSetPrecondition(newPrecondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__PRECONDITION, newPrecondition, newPrecondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__TAG:
        return basicSetTag(null, msgs);
      case LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__ELEMENT_TYPE:
        return basicSetElementType(null, msgs);
      case LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__CORRESPONDENCE_SOURCE:
        return basicSetCorrespondenceSource(null, msgs);
      case LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__PRECONDITION:
        return basicSetPrecondition(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__TAG:
        return getTag();
      case LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__ELEMENT_TYPE:
        return getElementType();
      case LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__CORRESPONDENCE_SOURCE:
        return getCorrespondenceSource();
      case LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__PRECONDITION:
        return getPrecondition();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__TAG:
        setTag((TagCodeBlock)newValue);
        return;
      case LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__ELEMENT_TYPE:
        setElementType((MetaclassReference)newValue);
        return;
      case LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__CORRESPONDENCE_SOURCE:
        setCorrespondenceSource((CorrespondingObjectCodeBlock)newValue);
        return;
      case LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__PRECONDITION:
        setPrecondition((PreconditionCodeBlock)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__TAG:
        setTag((TagCodeBlock)null);
        return;
      case LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__ELEMENT_TYPE:
        setElementType((MetaclassReference)null);
        return;
      case LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__CORRESPONDENCE_SOURCE:
        setCorrespondenceSource((CorrespondingObjectCodeBlock)null);
        return;
      case LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__PRECONDITION:
        setPrecondition((PreconditionCodeBlock)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__TAG:
        return tag != null;
      case LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__ELEMENT_TYPE:
        return elementType != null;
      case LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__CORRESPONDENCE_SOURCE:
        return correspondenceSource != null;
      case LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__PRECONDITION:
        return precondition != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass)
  {
    if (baseClass == Taggable.class)
    {
      switch (derivedFeatureID)
      {
        case LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__TAG: return LanguagePackage.TAGGABLE__TAG;
        default: return -1;
      }
    }
    return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass)
  {
    if (baseClass == Taggable.class)
    {
      switch (baseFeatureID)
      {
        case LanguagePackage.TAGGABLE__TAG: return LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT__TAG;
        default: return -1;
      }
    }
    return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
  }

} //RetrieveOrRequireAbscenceOfModelElementImpl

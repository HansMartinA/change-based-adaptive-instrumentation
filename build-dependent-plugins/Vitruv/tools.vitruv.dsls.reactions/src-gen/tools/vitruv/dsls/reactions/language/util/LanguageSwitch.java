/**
 * generated by Xtext 2.24.0
 */
package tools.vitruv.dsls.reactions.language.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import tools.vitruv.dsls.reactions.language.*;

import tools.vitruv.dsls.reactions.language.toplevelelements.ActionStatement;
import tools.vitruv.dsls.reactions.language.toplevelelements.CodeBlock;
import tools.vitruv.dsls.reactions.language.toplevelelements.MatcherStatement;
import tools.vitruv.dsls.reactions.language.toplevelelements.RoutineCallBlock;
import tools.vitruv.dsls.reactions.language.toplevelelements.Trigger;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see tools.vitruv.dsls.reactions.language.LanguagePackage
 * @generated
 */
public class LanguageSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static LanguagePackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LanguageSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = LanguagePackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case LanguagePackage.INVARIANT_VIOLATION_EVENT:
      {
        InvariantViolationEvent invariantViolationEvent = (InvariantViolationEvent)theEObject;
        T result = caseInvariantViolationEvent(invariantViolationEvent);
        if (result == null) result = caseTrigger(invariantViolationEvent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.MODEL_CHANGE:
      {
        ModelChange modelChange = (ModelChange)theEObject;
        T result = caseModelChange(modelChange);
        if (result == null) result = caseTrigger(modelChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.CONCRETE_MODEL_CHANGE:
      {
        ConcreteModelChange concreteModelChange = (ConcreteModelChange)theEObject;
        T result = caseConcreteModelChange(concreteModelChange);
        if (result == null) result = caseModelChange(concreteModelChange);
        if (result == null) result = caseTrigger(concreteModelChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.MODEL_ELEMENT_CHANGE:
      {
        ModelElementChange modelElementChange = (ModelElementChange)theEObject;
        T result = caseModelElementChange(modelElementChange);
        if (result == null) result = caseConcreteModelChange(modelElementChange);
        if (result == null) result = caseModelChange(modelElementChange);
        if (result == null) result = caseTrigger(modelElementChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.MODEL_ATTRIBUTE_CHANGE:
      {
        ModelAttributeChange modelAttributeChange = (ModelAttributeChange)theEObject;
        T result = caseModelAttributeChange(modelAttributeChange);
        if (result == null) result = caseConcreteModelChange(modelAttributeChange);
        if (result == null) result = caseModelChange(modelAttributeChange);
        if (result == null) result = caseTrigger(modelAttributeChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.ARBITRARY_MODEL_CHANGE:
      {
        ArbitraryModelChange arbitraryModelChange = (ArbitraryModelChange)theEObject;
        T result = caseArbitraryModelChange(arbitraryModelChange);
        if (result == null) result = caseModelChange(arbitraryModelChange);
        if (result == null) result = caseTrigger(arbitraryModelChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.ELEMENT_EXISTENCE_CHANGE_TYPE:
      {
        ElementExistenceChangeType elementExistenceChangeType = (ElementExistenceChangeType)theEObject;
        T result = caseElementExistenceChangeType(elementExistenceChangeType);
        if (result == null) result = caseElementChangeType(elementExistenceChangeType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.MODEL_ELEMENT_USAGE_CHANGE_TYPE:
      {
        ModelElementUsageChangeType modelElementUsageChangeType = (ModelElementUsageChangeType)theEObject;
        T result = caseModelElementUsageChangeType(modelElementUsageChangeType);
        if (result == null) result = caseElementChangeType(modelElementUsageChangeType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.ELEMENT_CREATION_CHANGE_TYPE:
      {
        ElementCreationChangeType elementCreationChangeType = (ElementCreationChangeType)theEObject;
        T result = caseElementCreationChangeType(elementCreationChangeType);
        if (result == null) result = caseElementExistenceChangeType(elementCreationChangeType);
        if (result == null) result = caseElementChangeType(elementCreationChangeType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.ELEMENT_DELETION_CHANGE_TYPE:
      {
        ElementDeletionChangeType elementDeletionChangeType = (ElementDeletionChangeType)theEObject;
        T result = caseElementDeletionChangeType(elementDeletionChangeType);
        if (result == null) result = caseElementExistenceChangeType(elementDeletionChangeType);
        if (result == null) result = caseElementChangeType(elementDeletionChangeType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.ELEMENT_REFERENCE_CHANGE_TYPE:
      {
        ElementReferenceChangeType elementReferenceChangeType = (ElementReferenceChangeType)theEObject;
        T result = caseElementReferenceChangeType(elementReferenceChangeType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.ELEMENT_ROOT_CHANGE_TYPE:
      {
        ElementRootChangeType elementRootChangeType = (ElementRootChangeType)theEObject;
        T result = caseElementRootChangeType(elementRootChangeType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.ELEMENT_INSERTION_CHANGE_TYPE:
      {
        ElementInsertionChangeType elementInsertionChangeType = (ElementInsertionChangeType)theEObject;
        T result = caseElementInsertionChangeType(elementInsertionChangeType);
        if (result == null) result = caseModelElementUsageChangeType(elementInsertionChangeType);
        if (result == null) result = caseElementChangeType(elementInsertionChangeType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.ELEMENT_INSERTION_IN_LIST_CHANGE_TYPE:
      {
        ElementInsertionInListChangeType elementInsertionInListChangeType = (ElementInsertionInListChangeType)theEObject;
        T result = caseElementInsertionInListChangeType(elementInsertionInListChangeType);
        if (result == null) result = caseElementInsertionChangeType(elementInsertionInListChangeType);
        if (result == null) result = caseElementReferenceChangeType(elementInsertionInListChangeType);
        if (result == null) result = caseModelElementUsageChangeType(elementInsertionInListChangeType);
        if (result == null) result = caseElementChangeType(elementInsertionInListChangeType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.ELEMENT_INSERTION_AS_ROOT_CHANGE_TYPE:
      {
        ElementInsertionAsRootChangeType elementInsertionAsRootChangeType = (ElementInsertionAsRootChangeType)theEObject;
        T result = caseElementInsertionAsRootChangeType(elementInsertionAsRootChangeType);
        if (result == null) result = caseElementRootChangeType(elementInsertionAsRootChangeType);
        if (result == null) result = caseElementInsertionChangeType(elementInsertionAsRootChangeType);
        if (result == null) result = caseModelElementUsageChangeType(elementInsertionAsRootChangeType);
        if (result == null) result = caseElementChangeType(elementInsertionAsRootChangeType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.ELEMENT_REMOVAL_CHANGE_TYPE:
      {
        ElementRemovalChangeType elementRemovalChangeType = (ElementRemovalChangeType)theEObject;
        T result = caseElementRemovalChangeType(elementRemovalChangeType);
        if (result == null) result = caseModelElementUsageChangeType(elementRemovalChangeType);
        if (result == null) result = caseElementChangeType(elementRemovalChangeType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.ELEMENT_REMOVAL_AS_ROOT_CHANGE_TYPE:
      {
        ElementRemovalAsRootChangeType elementRemovalAsRootChangeType = (ElementRemovalAsRootChangeType)theEObject;
        T result = caseElementRemovalAsRootChangeType(elementRemovalAsRootChangeType);
        if (result == null) result = caseElementRootChangeType(elementRemovalAsRootChangeType);
        if (result == null) result = caseElementRemovalChangeType(elementRemovalAsRootChangeType);
        if (result == null) result = caseModelElementUsageChangeType(elementRemovalAsRootChangeType);
        if (result == null) result = caseElementChangeType(elementRemovalAsRootChangeType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.ELEMENT_REMOVAL_FROM_LIST_CHANGE_TYPE:
      {
        ElementRemovalFromListChangeType elementRemovalFromListChangeType = (ElementRemovalFromListChangeType)theEObject;
        T result = caseElementRemovalFromListChangeType(elementRemovalFromListChangeType);
        if (result == null) result = caseElementRemovalChangeType(elementRemovalFromListChangeType);
        if (result == null) result = caseElementReferenceChangeType(elementRemovalFromListChangeType);
        if (result == null) result = caseModelElementUsageChangeType(elementRemovalFromListChangeType);
        if (result == null) result = caseElementChangeType(elementRemovalFromListChangeType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.ELEMENT_REPLACEMENT_CHANGE_TYPE:
      {
        ElementReplacementChangeType elementReplacementChangeType = (ElementReplacementChangeType)theEObject;
        T result = caseElementReplacementChangeType(elementReplacementChangeType);
        if (result == null) result = caseModelElementUsageChangeType(elementReplacementChangeType);
        if (result == null) result = caseElementReferenceChangeType(elementReplacementChangeType);
        if (result == null) result = caseElementChangeType(elementReplacementChangeType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.ELEMENT_CREATION_AND_INSERTION_CHANGE_TYPE:
      {
        ElementCreationAndInsertionChangeType elementCreationAndInsertionChangeType = (ElementCreationAndInsertionChangeType)theEObject;
        T result = caseElementCreationAndInsertionChangeType(elementCreationAndInsertionChangeType);
        if (result == null) result = caseElementCompoundChangeType(elementCreationAndInsertionChangeType);
        if (result == null) result = caseElementChangeType(elementCreationAndInsertionChangeType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.ELEMENT_DELETION_AND_REMOVAL_CHANGE_TYPE:
      {
        ElementDeletionAndRemovalChangeType elementDeletionAndRemovalChangeType = (ElementDeletionAndRemovalChangeType)theEObject;
        T result = caseElementDeletionAndRemovalChangeType(elementDeletionAndRemovalChangeType);
        if (result == null) result = caseElementCompoundChangeType(elementDeletionAndRemovalChangeType);
        if (result == null) result = caseElementChangeType(elementDeletionAndRemovalChangeType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.ELEMENT_DELETION_AND_CREATION_AND_REPLACEMENT_CHANGE_TYPE:
      {
        ElementDeletionAndCreationAndReplacementChangeType elementDeletionAndCreationAndReplacementChangeType = (ElementDeletionAndCreationAndReplacementChangeType)theEObject;
        T result = caseElementDeletionAndCreationAndReplacementChangeType(elementDeletionAndCreationAndReplacementChangeType);
        if (result == null) result = caseElementCompoundChangeType(elementDeletionAndCreationAndReplacementChangeType);
        if (result == null) result = caseElementChangeType(elementDeletionAndCreationAndReplacementChangeType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.ELEMENT_CHANGE_TYPE:
      {
        ElementChangeType elementChangeType = (ElementChangeType)theEObject;
        T result = caseElementChangeType(elementChangeType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.ELEMENT_COMPOUND_CHANGE_TYPE:
      {
        ElementCompoundChangeType elementCompoundChangeType = (ElementCompoundChangeType)theEObject;
        T result = caseElementCompoundChangeType(elementCompoundChangeType);
        if (result == null) result = caseElementChangeType(elementCompoundChangeType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.RETRIEVE_OR_REQUIRE_ABSCENCE_OF_MODEL_ELEMENT:
      {
        RetrieveOrRequireAbscenceOfModelElement retrieveOrRequireAbscenceOfModelElement = (RetrieveOrRequireAbscenceOfModelElement)theEObject;
        T result = caseRetrieveOrRequireAbscenceOfModelElement(retrieveOrRequireAbscenceOfModelElement);
        if (result == null) result = caseMatcherStatement(retrieveOrRequireAbscenceOfModelElement);
        if (result == null) result = caseTaggable(retrieveOrRequireAbscenceOfModelElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.REQUIRE_ABSCENCE_OF_MODEL_ELEMENT:
      {
        RequireAbscenceOfModelElement requireAbscenceOfModelElement = (RequireAbscenceOfModelElement)theEObject;
        T result = caseRequireAbscenceOfModelElement(requireAbscenceOfModelElement);
        if (result == null) result = caseRetrieveOrRequireAbscenceOfModelElement(requireAbscenceOfModelElement);
        if (result == null) result = caseMatcherStatement(requireAbscenceOfModelElement);
        if (result == null) result = caseTaggable(requireAbscenceOfModelElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.RETRIEVE_MODEL_ELEMENT:
      {
        RetrieveModelElement retrieveModelElement = (RetrieveModelElement)theEObject;
        T result = caseRetrieveModelElement(retrieveModelElement);
        if (result == null) result = caseRetrieveOrRequireAbscenceOfModelElement(retrieveModelElement);
        if (result == null) result = caseMatcherStatement(retrieveModelElement);
        if (result == null) result = caseTaggable(retrieveModelElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.RETRIEVE_MODEL_ELEMENT_TYPE:
      {
        RetrieveModelElementType retrieveModelElementType = (RetrieveModelElementType)theEObject;
        T result = caseRetrieveModelElementType(retrieveModelElementType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.MATCHER_CHECK_STATEMENT:
      {
        MatcherCheckStatement matcherCheckStatement = (MatcherCheckStatement)theEObject;
        T result = caseMatcherCheckStatement(matcherCheckStatement);
        if (result == null) result = caseMatcherStatement(matcherCheckStatement);
        if (result == null) result = caseCodeBlock(matcherCheckStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.ROUTINE_CALL_STATEMENT:
      {
        RoutineCallStatement routineCallStatement = (RoutineCallStatement)theEObject;
        T result = caseRoutineCallStatement(routineCallStatement);
        if (result == null) result = caseRoutineCallBlock(routineCallStatement);
        if (result == null) result = caseActionStatement(routineCallStatement);
        if (result == null) result = caseCodeBlock(routineCallStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.EXECUTE_ACTION_STATEMENT:
      {
        ExecuteActionStatement executeActionStatement = (ExecuteActionStatement)theEObject;
        T result = caseExecuteActionStatement(executeActionStatement);
        if (result == null) result = caseActionStatement(executeActionStatement);
        if (result == null) result = caseCodeBlock(executeActionStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.CREATE_MODEL_ELEMENT:
      {
        CreateModelElement createModelElement = (CreateModelElement)theEObject;
        T result = caseCreateModelElement(createModelElement);
        if (result == null) result = caseActionStatement(createModelElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.DELETE_MODEL_ELEMENT:
      {
        DeleteModelElement deleteModelElement = (DeleteModelElement)theEObject;
        T result = caseDeleteModelElement(deleteModelElement);
        if (result == null) result = caseActionStatement(deleteModelElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.UPDATE_MODEL_ELEMENT:
      {
        UpdateModelElement updateModelElement = (UpdateModelElement)theEObject;
        T result = caseUpdateModelElement(updateModelElement);
        if (result == null) result = caseActionStatement(updateModelElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.CREATE_CORRESPONDENCE:
      {
        CreateCorrespondence createCorrespondence = (CreateCorrespondence)theEObject;
        T result = caseCreateCorrespondence(createCorrespondence);
        if (result == null) result = caseActionStatement(createCorrespondence);
        if (result == null) result = caseTaggable(createCorrespondence);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.REMOVE_CORRESPONDENCE:
      {
        RemoveCorrespondence removeCorrespondence = (RemoveCorrespondence)theEObject;
        T result = caseRemoveCorrespondence(removeCorrespondence);
        if (result == null) result = caseActionStatement(removeCorrespondence);
        if (result == null) result = caseTaggable(removeCorrespondence);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.TAGGABLE:
      {
        Taggable taggable = (Taggable)theEObject;
        T result = caseTaggable(taggable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.EXISTING_ELEMENT_REFERENCE:
      {
        ExistingElementReference existingElementReference = (ExistingElementReference)theEObject;
        T result = caseExistingElementReference(existingElementReference);
        if (result == null) result = caseCodeBlock(existingElementReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.TAG_CODE_BLOCK:
      {
        TagCodeBlock tagCodeBlock = (TagCodeBlock)theEObject;
        T result = caseTagCodeBlock(tagCodeBlock);
        if (result == null) result = caseCodeBlock(tagCodeBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.CORRESPONDING_OBJECT_CODE_BLOCK:
      {
        CorrespondingObjectCodeBlock correspondingObjectCodeBlock = (CorrespondingObjectCodeBlock)theEObject;
        T result = caseCorrespondingObjectCodeBlock(correspondingObjectCodeBlock);
        if (result == null) result = caseCodeBlock(correspondingObjectCodeBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.EXECUTION_CODE_BLOCK:
      {
        ExecutionCodeBlock executionCodeBlock = (ExecutionCodeBlock)theEObject;
        T result = caseExecutionCodeBlock(executionCodeBlock);
        if (result == null) result = caseCodeBlock(executionCodeBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.MODEL_ATTRIBUTE_INSERTED_CHANGE:
      {
        ModelAttributeInsertedChange modelAttributeInsertedChange = (ModelAttributeInsertedChange)theEObject;
        T result = caseModelAttributeInsertedChange(modelAttributeInsertedChange);
        if (result == null) result = caseModelAttributeChange(modelAttributeInsertedChange);
        if (result == null) result = caseConcreteModelChange(modelAttributeInsertedChange);
        if (result == null) result = caseModelChange(modelAttributeInsertedChange);
        if (result == null) result = caseTrigger(modelAttributeInsertedChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.MODEL_ATTRIBUTE_REMOVED_CHANGE:
      {
        ModelAttributeRemovedChange modelAttributeRemovedChange = (ModelAttributeRemovedChange)theEObject;
        T result = caseModelAttributeRemovedChange(modelAttributeRemovedChange);
        if (result == null) result = caseModelAttributeChange(modelAttributeRemovedChange);
        if (result == null) result = caseConcreteModelChange(modelAttributeRemovedChange);
        if (result == null) result = caseModelChange(modelAttributeRemovedChange);
        if (result == null) result = caseTrigger(modelAttributeRemovedChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.MODEL_ATTRIBUTE_REPLACED_CHANGE:
      {
        ModelAttributeReplacedChange modelAttributeReplacedChange = (ModelAttributeReplacedChange)theEObject;
        T result = caseModelAttributeReplacedChange(modelAttributeReplacedChange);
        if (result == null) result = caseModelAttributeChange(modelAttributeReplacedChange);
        if (result == null) result = caseConcreteModelChange(modelAttributeReplacedChange);
        if (result == null) result = caseModelChange(modelAttributeReplacedChange);
        if (result == null) result = caseTrigger(modelAttributeReplacedChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.RETRIEVE_ONE_MODEL_ELEMENT:
      {
        RetrieveOneModelElement retrieveOneModelElement = (RetrieveOneModelElement)theEObject;
        T result = caseRetrieveOneModelElement(retrieveOneModelElement);
        if (result == null) result = caseRetrieveModelElementType(retrieveOneModelElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.RETRIEVE_MANY_MODEL_ELEMENTS:
      {
        RetrieveManyModelElements retrieveManyModelElements = (RetrieveManyModelElements)theEObject;
        T result = caseRetrieveManyModelElements(retrieveManyModelElements);
        if (result == null) result = caseRetrieveModelElementType(retrieveManyModelElements);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Invariant Violation Event</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Invariant Violation Event</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInvariantViolationEvent(InvariantViolationEvent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModelChange(ModelChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Concrete Model Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Concrete Model Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConcreteModelChange(ConcreteModelChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model Element Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model Element Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModelElementChange(ModelElementChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model Attribute Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model Attribute Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModelAttributeChange(ModelAttributeChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Arbitrary Model Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Arbitrary Model Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArbitraryModelChange(ArbitraryModelChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element Existence Change Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element Existence Change Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElementExistenceChangeType(ElementExistenceChangeType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model Element Usage Change Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model Element Usage Change Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModelElementUsageChangeType(ModelElementUsageChangeType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element Creation Change Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element Creation Change Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElementCreationChangeType(ElementCreationChangeType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element Deletion Change Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element Deletion Change Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElementDeletionChangeType(ElementDeletionChangeType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element Reference Change Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element Reference Change Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElementReferenceChangeType(ElementReferenceChangeType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element Root Change Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element Root Change Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElementRootChangeType(ElementRootChangeType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element Insertion Change Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element Insertion Change Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElementInsertionChangeType(ElementInsertionChangeType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element Insertion In List Change Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element Insertion In List Change Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElementInsertionInListChangeType(ElementInsertionInListChangeType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element Insertion As Root Change Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element Insertion As Root Change Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElementInsertionAsRootChangeType(ElementInsertionAsRootChangeType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element Removal Change Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element Removal Change Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElementRemovalChangeType(ElementRemovalChangeType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element Removal As Root Change Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element Removal As Root Change Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElementRemovalAsRootChangeType(ElementRemovalAsRootChangeType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element Removal From List Change Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element Removal From List Change Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElementRemovalFromListChangeType(ElementRemovalFromListChangeType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element Replacement Change Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element Replacement Change Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElementReplacementChangeType(ElementReplacementChangeType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element Creation And Insertion Change Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element Creation And Insertion Change Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElementCreationAndInsertionChangeType(ElementCreationAndInsertionChangeType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element Deletion And Removal Change Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element Deletion And Removal Change Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElementDeletionAndRemovalChangeType(ElementDeletionAndRemovalChangeType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element Deletion And Creation And Replacement Change Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element Deletion And Creation And Replacement Change Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElementDeletionAndCreationAndReplacementChangeType(ElementDeletionAndCreationAndReplacementChangeType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element Change Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element Change Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElementChangeType(ElementChangeType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element Compound Change Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element Compound Change Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElementCompoundChangeType(ElementCompoundChangeType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Retrieve Or Require Abscence Of Model Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Retrieve Or Require Abscence Of Model Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRetrieveOrRequireAbscenceOfModelElement(RetrieveOrRequireAbscenceOfModelElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Require Abscence Of Model Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Require Abscence Of Model Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRequireAbscenceOfModelElement(RequireAbscenceOfModelElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Retrieve Model Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Retrieve Model Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRetrieveModelElement(RetrieveModelElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Retrieve Model Element Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Retrieve Model Element Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRetrieveModelElementType(RetrieveModelElementType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Matcher Check Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Matcher Check Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMatcherCheckStatement(MatcherCheckStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Routine Call Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Routine Call Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRoutineCallStatement(RoutineCallStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Execute Action Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Execute Action Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExecuteActionStatement(ExecuteActionStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Create Model Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Create Model Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCreateModelElement(CreateModelElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Delete Model Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Delete Model Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDeleteModelElement(DeleteModelElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Update Model Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Update Model Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUpdateModelElement(UpdateModelElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Create Correspondence</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Create Correspondence</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCreateCorrespondence(CreateCorrespondence object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Remove Correspondence</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Remove Correspondence</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRemoveCorrespondence(RemoveCorrespondence object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Taggable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Taggable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTaggable(Taggable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Existing Element Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Existing Element Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExistingElementReference(ExistingElementReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tag Code Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tag Code Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTagCodeBlock(TagCodeBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Corresponding Object Code Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Corresponding Object Code Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCorrespondingObjectCodeBlock(CorrespondingObjectCodeBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Execution Code Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Execution Code Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExecutionCodeBlock(ExecutionCodeBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model Attribute Inserted Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model Attribute Inserted Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModelAttributeInsertedChange(ModelAttributeInsertedChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model Attribute Removed Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model Attribute Removed Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModelAttributeRemovedChange(ModelAttributeRemovedChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model Attribute Replaced Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model Attribute Replaced Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModelAttributeReplacedChange(ModelAttributeReplacedChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Retrieve One Model Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Retrieve One Model Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRetrieveOneModelElement(RetrieveOneModelElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Retrieve Many Model Elements</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Retrieve Many Model Elements</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRetrieveManyModelElements(RetrieveManyModelElements object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Trigger</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Trigger</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTrigger(Trigger object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Matcher Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Matcher Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMatcherStatement(MatcherStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Code Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Code Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCodeBlock(CodeBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Routine Call Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Routine Call Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRoutineCallBlock(RoutineCallBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Action Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Action Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseActionStatement(ActionStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //LanguageSwitch
